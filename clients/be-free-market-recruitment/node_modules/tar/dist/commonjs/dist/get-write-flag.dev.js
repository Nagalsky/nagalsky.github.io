"use strict"; // Get the appropriate flag to use for creating files
// We use fmap on Windows platforms for files less than
// 512kb.  This is a fairly low limit, but avoids making
// things slower in some cases.  Since most of what this
// library is used for is extracting tarballs of many
// relatively small files in npm packages and the like,
// it can be a big boost on Windows platforms.

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWriteFlag = void 0;

var fs_1 = __importDefault(require("fs"));

var platform = process.env.__FAKE_PLATFORM__ || process.platform;
var isWindows = platform === 'win32';
/* c8 ignore start */

var _fs_1$default$constan = fs_1["default"].constants,
    O_CREAT = _fs_1$default$constan.O_CREAT,
    O_TRUNC = _fs_1$default$constan.O_TRUNC,
    O_WRONLY = _fs_1$default$constan.O_WRONLY;
var UV_FS_O_FILEMAP = Number(process.env.__FAKE_FS_O_FILENAME__) || fs_1["default"].constants.UV_FS_O_FILEMAP || 0;
/* c8 ignore stop */

var fMapEnabled = isWindows && !!UV_FS_O_FILEMAP;
var fMapLimit = 512 * 1024;
var fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY;
exports.getWriteFlag = !fMapEnabled ? function () {
  return 'w';
} : function (size) {
  return size < fMapLimit ? fMapFlag : 'w';
};