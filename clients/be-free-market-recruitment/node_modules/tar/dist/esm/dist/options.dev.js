"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dealias = exports.isNoFile = exports.isFile = exports.isAsync = exports.isSync = exports.isAsyncNoFile = exports.isSyncNoFile = exports.isAsyncFile = exports.isSyncFile = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// turn tar(1) style args like `C` into the more verbose things like `cwd`
var argmap = new Map([['C', 'cwd'], ['f', 'file'], ['z', 'gzip'], ['P', 'preservePaths'], ['U', 'unlink'], ['strip-components', 'strip'], ['stripComponents', 'strip'], ['keep-newer', 'newer'], ['keepNewer', 'newer'], ['keep-newer-files', 'newer'], ['keepNewerFiles', 'newer'], ['k', 'keep'], ['keep-existing', 'keep'], ['keepExisting', 'keep'], ['m', 'noMtime'], ['no-mtime', 'noMtime'], ['p', 'preserveOwner'], ['L', 'follow'], ['h', 'follow'], ['onentry', 'onReadEntry']]);

var isSyncFile = function isSyncFile(o) {
  return !!o.sync && !!o.file;
};

exports.isSyncFile = isSyncFile;

var isAsyncFile = function isAsyncFile(o) {
  return !o.sync && !!o.file;
};

exports.isAsyncFile = isAsyncFile;

var isSyncNoFile = function isSyncNoFile(o) {
  return !!o.sync && !o.file;
};

exports.isSyncNoFile = isSyncNoFile;

var isAsyncNoFile = function isAsyncNoFile(o) {
  return !o.sync && !o.file;
};

exports.isAsyncNoFile = isAsyncNoFile;

var isSync = function isSync(o) {
  return !!o.sync;
};

exports.isSync = isSync;

var isAsync = function isAsync(o) {
  return !o.sync;
};

exports.isAsync = isAsync;

var isFile = function isFile(o) {
  return !!o.file;
};

exports.isFile = isFile;

var isNoFile = function isNoFile(o) {
  return !o.file;
};

exports.isNoFile = isNoFile;

var dealiasKey = function dealiasKey(k) {
  var d = argmap.get(k);
  if (d) return d;
  return k;
};

var dealias = function dealias() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if (!opt) return {};
  var result = {};

  for (var _i = 0, _Object$entries = Object.entries(opt); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        v = _Object$entries$_i[1];

    // TS doesn't know that aliases are going to always be the same type
    var k = dealiasKey(key);
    result[k] = v;
  } // affordance for deprecated noChmod -> chmod


  if (result.chmod === undefined && result.noChmod === false) {
    result.chmod = true;
  }

  delete result.noChmod;
  return result;
};

exports.dealias = dealias;