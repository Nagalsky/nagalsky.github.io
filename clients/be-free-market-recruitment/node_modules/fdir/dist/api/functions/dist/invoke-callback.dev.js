"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.build = build;

var onlyCountsSync = function onlyCountsSync(state) {
  return state.counts;
};

var groupsSync = function groupsSync(state) {
  return state.groups;
};

var defaultSync = function defaultSync(state) {
  return state.paths;
};

var limitFilesSync = function limitFilesSync(state) {
  return state.paths.slice(0, state.options.maxFiles);
};

var onlyCountsAsync = function onlyCountsAsync(state, error, callback) {
  report(error, callback, state.counts, state.options.suppressErrors);
  return null;
};

var defaultAsync = function defaultAsync(state, error, callback) {
  report(error, callback, state.paths, state.options.suppressErrors);
  return null;
};

var limitFilesAsync = function limitFilesAsync(state, error, callback) {
  report(error, callback, state.paths.slice(0, state.options.maxFiles), state.options.suppressErrors);
  return null;
};

var groupsAsync = function groupsAsync(state, error, callback) {
  report(error, callback, state.groups, state.options.suppressErrors);
  return null;
};

function report(error, callback, output, suppressErrors) {
  if (error && !suppressErrors) callback(error, output);else callback(null, output);
}

function build(options, isSynchronous) {
  var onlyCounts = options.onlyCounts,
      group = options.group,
      maxFiles = options.maxFiles;
  if (onlyCounts) return isSynchronous ? onlyCountsSync : onlyCountsAsync;else if (group) return isSynchronous ? groupsSync : groupsAsync;else if (maxFiles) return isSynchronous ? limitFilesSync : limitFilesAsync;else return isSynchronous ? defaultSync : defaultAsync;
}