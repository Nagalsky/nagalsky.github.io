"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findMaxDepth = exports.findDirectoryPatterns = exports.findCommonRoots = void 0; // Glob Optimizations:
// 1. Find common roots and only iterate on them
//    For example:
//      1. "node_modules/**/*.ts" only requires us to search in node_modules
//          folder.
//      2. Similarly, multiple glob patterns can have common deterministic roots
//         The optimizer's job is to find these roots and only crawl them.
//      3. If any of the glob patterns have a globstar i.e. **/ in them, we
//         should bail out.
// 2. Find out if glob is requesting only directories
// 3. Find maximum depth requested
// 4. If glob contains a root that doesn't exist, bail out

var braces_1 = require("braces");

var glob_parent_1 = __importDefault(require("glob-parent"));

function findCommonRoots(patterns) {
  var allRoots = new Set();
  patterns = patterns.map(function (p) {
    return p.includes("{") ? (0, braces_1.expand)(p) : p;
  }).flat();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = patterns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var pattern = _step.value;
      var parent = (0, glob_parent_1["default"])(pattern);
      if (parent === ".") return [];
      allRoots.add(parent);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return Array.from(allRoots.values()).filter(function (root) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = allRoots[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var r = _step2.value;
        if (r === root) continue;
        if (root.startsWith(r)) return false;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return true;
  });
}

exports.findCommonRoots = findCommonRoots;

function findDirectoryPatterns(patterns) {
  return patterns.filter(function (p) {
    return p.endsWith("/");
  });
}

exports.findDirectoryPatterns = findDirectoryPatterns;

function findMaxDepth(patterns) {
  var isGlobstar = patterns.some(function (p) {
    return p.includes("**/") || p.includes("/**") || p === "**";
  });
  if (isGlobstar) return false;
  var maxDepth = patterns.reduce(function (depth, p) {
    return Math.max(depth, p.split("/").filter(Boolean).length);
  }, 0);
  return maxDepth;
}

exports.findMaxDepth = findMaxDepth;