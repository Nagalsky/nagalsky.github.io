"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLogFilter = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
  @license
	Rollup.js v4.41.1
	Sat, 24 May 2025 06:13:57 GMT - commit 7c469dc4eb8e1cb6def9fdc04581fdfce9975da3

	https://github.com/rollup/rollup

	Released under the MIT License.
*/
var getLogFilter = function getLogFilter(filters) {
  if (filters.length === 0) return function () {
    return true;
  };
  var normalizedFilters = filters.map(function (filter) {
    return filter.split('&').map(function (subFilter) {
      var inverted = subFilter.startsWith('!');
      if (inverted) subFilter = subFilter.slice(1);

      var _subFilter$split = subFilter.split(':'),
          _subFilter$split2 = _toArray(_subFilter$split),
          key = _subFilter$split2[0],
          value = _subFilter$split2.slice(1);

      return {
        inverted: inverted,
        key: key.split('.'),
        parts: value.join(':').split('*')
      };
    });
  });
  return function (log) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      nextIntersectedFilter: for (var _iterator = normalizedFilters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var intersectedFilters = _step.value;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = intersectedFilters[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _step2$value = _step2.value,
                inverted = _step2$value.inverted,
                key = _step2$value.key,
                parts = _step2$value.parts;
            var isFilterSatisfied = testFilter(log, key, parts);

            if (inverted ? isFilterSatisfied : !isFilterSatisfied) {
              continue nextIntersectedFilter;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return true;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return false;
  };
};

exports.getLogFilter = getLogFilter;

var testFilter = function testFilter(log, key, parts) {
  var rawValue = log;

  for (var index = 0; index < key.length; index++) {
    if (!rawValue) {
      return false;
    }

    var part = key[index];

    if (!(part in rawValue)) {
      return false;
    }

    rawValue = rawValue[part];
  }

  var value = _typeof(rawValue) === 'object' ? JSON.stringify(rawValue) : String(rawValue);

  if (parts.length === 1) {
    return value === parts[0];
  }

  if (!value.startsWith(parts[0])) {
    return false;
  }

  var lastPartIndex = parts.length - 1;

  for (var _index = 1; _index < lastPartIndex; _index++) {
    var _part = parts[_index];
    var position = value.indexOf(_part);

    if (position === -1) {
      return false;
    }

    value = value.slice(position + _part.length);
  }

  return value.endsWith(parts[lastPartIndex]);
};