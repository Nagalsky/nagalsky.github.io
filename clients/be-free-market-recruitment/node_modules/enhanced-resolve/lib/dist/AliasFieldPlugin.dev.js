/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DescriptionFileUtils = require("./DescriptionFileUtils");

var getInnerRequest = require("./getInnerRequest");
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").JsonPrimitive} JsonPrimitive */

/** @typedef {import("./Resolver").ResolveRequest} ResolveRequest */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */


module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   * @param {string | Array<string>} field field
   * @param {string | ResolveStepHook} target target
   */
  function AliasFieldPlugin(source, field, target) {
    _classCallCheck(this, AliasFieldPlugin);

    this.source = source;
    this.field = field;
    this.target = target;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(AliasFieldPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("AliasFieldPlugin", function (request, resolveContext, callback) {
        if (!request.descriptionFileData) return callback();
        var innerRequest = getInnerRequest(resolver, request);
        if (!innerRequest) return callback();
        var fieldData = DescriptionFileUtils.getField(request.descriptionFileData, _this.field);

        if (fieldData === null || _typeof(fieldData) !== "object") {
          if (resolveContext.log) resolveContext.log("Field '" + _this.field + "' doesn't contain a valid alias configuration");
          return callback();
        }
        /** @type {JsonPrimitive | undefined} */


        var data = Object.prototype.hasOwnProperty.call(fieldData, innerRequest) ?
        /** @type {{[Key in string]: JsonPrimitive}} */
        fieldData[innerRequest] : innerRequest.startsWith("./") ?
        /** @type {{[Key in string]: JsonPrimitive}} */
        fieldData[innerRequest.slice(2)] : undefined;
        if (data === innerRequest) return callback();
        if (data === undefined) return callback();

        if (data === false) {
          /** @type {ResolveRequest} */
          var ignoreObj = _objectSpread({}, request, {
            path: false
          });

          if (typeof resolveContext["yield"] === "function") {
            resolveContext["yield"](ignoreObj);
            return callback(null, null);
          }

          return callback(null, ignoreObj);
        }
        /** @type {ResolveRequest} */


        var obj = _objectSpread({}, request, {
          path:
          /** @type {string} */
          request.descriptionFileRoot,
          request:
          /** @type {string} */
          data,
          fullySpecified: false
        });

        resolver.doResolve(target, obj, "aliased from description file " + request.descriptionFilePath + " with mapping '" + innerRequest + "' to '" +
        /** @type {string} */
        data + "'", resolveContext, function (err, result) {
          if (err) return callback(err); // Don't allow other aliasing or raw request

          if (result === undefined) return callback(null, null);
          callback(null, result);
        });
      });
    }
  }]);

  return AliasFieldPlugin;
}();