/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").ResolveRequest} ResolveRequest */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   * @param {Partial<ResolveRequest>} test compare object
   * @param {string | null} message log message
   * @param {boolean} allowAlternatives when false, do not continue with the current step when "test" matches
   * @param {string | ResolveStepHook} target target
   */
  function ConditionalPlugin(source, test, message, allowAlternatives, target) {
    _classCallCheck(this, ConditionalPlugin);

    this.source = source;
    this.test = test;
    this.message = message;
    this.allowAlternatives = allowAlternatives;
    this.target = target;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(ConditionalPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var target = resolver.ensureHook(this.target);
      var test = this.test,
          message = this.message,
          allowAlternatives = this.allowAlternatives;
      var keys =
      /** @type {(keyof ResolveRequest)[]} */
      Object.keys(test);
      resolver.getHook(this.source).tapAsync("ConditionalPlugin", function (request, resolveContext, callback) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var prop = _step.value;
            if (request[prop] !== test[prop]) return callback();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        resolver.doResolve(target, request, message, resolveContext, allowAlternatives ? callback : function (err, result) {
          if (err) return callback(err); // Don't allow other alternatives

          if (result === undefined) return callback(null, null);
          callback(null, result);
        });
      });
    }
  }]);

  return ConditionalPlugin;
}();