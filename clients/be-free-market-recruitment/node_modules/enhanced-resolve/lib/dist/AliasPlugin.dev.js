/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var forEachBail = require("./forEachBail");

var _require = require("./util/path"),
    PathType = _require.PathType,
    getType = _require.getType;
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").ResolveRequest} ResolveRequest */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */

/** @typedef {string | Array<string> | false} Alias */

/** @typedef {{alias: Alias, name: string, onlyModule?: boolean}} AliasOption */


module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   * @param {AliasOption | Array<AliasOption>} options options
   * @param {string | ResolveStepHook} target target
   */
  function AliasPlugin(source, options, target) {
    _classCallCheck(this, AliasPlugin);

    this.source = source;
    this.options = Array.isArray(options) ? options : [options];
    this.target = target;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(AliasPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      /**
       * @param {string} maybeAbsolutePath path
       * @returns {null|string} absolute path with slash ending
       */

      var getAbsolutePathWithSlashEnding = function getAbsolutePathWithSlashEnding(maybeAbsolutePath) {
        var type = getType(maybeAbsolutePath);

        if (type === PathType.AbsolutePosix || type === PathType.AbsoluteWin) {
          return resolver.join(maybeAbsolutePath, "_").slice(0, -1);
        }

        return null;
      };
      /**
       * @param {string} path path
       * @param {string} maybeSubPath sub path
       * @returns {boolean} true, if path is sub path
       */


      var isSubPath = function isSubPath(path, maybeSubPath) {
        var absolutePath = getAbsolutePathWithSlashEnding(maybeSubPath);
        if (!absolutePath) return false;
        return path.startsWith(absolutePath);
      };

      resolver.getHook(this.source).tapAsync("AliasPlugin", function (request, resolveContext, callback) {
        var innerRequest = request.request || request.path;
        if (!innerRequest) return callback();
        forEachBail(_this.options, function (item, callback) {
          /** @type {boolean} */
          var shouldStop = false;
          var matchRequest = innerRequest === item.name || !item.onlyModule && (request.request ? innerRequest.startsWith("".concat(item.name, "/")) : isSubPath(innerRequest, item.name));
          var splitName = item.name.split("*");
          var matchWildcard = !item.onlyModule && splitName.length === 2;

          if (matchRequest || matchWildcard) {
            /**
             * @param {Alias} alias alias
             * @param {(err?: null|Error, result?: null|ResolveRequest) => void} callback callback
             * @returns {void}
             */
            var resolveWithAlias = function resolveWithAlias(alias, callback) {
              if (alias === false) {
                /** @type {ResolveRequest} */
                var ignoreObj = _objectSpread({}, request, {
                  path: false
                });

                if (typeof resolveContext["yield"] === "function") {
                  resolveContext["yield"](ignoreObj);
                  return callback(null, null);
                }

                return callback(null, ignoreObj);
              }

              var newRequestStr;

              var _splitName = _slicedToArray(splitName, 2),
                  prefix = _splitName[0],
                  suffix = _splitName[1];

              if (matchWildcard && innerRequest.startsWith(prefix) && innerRequest.endsWith(suffix)) {
                var match = innerRequest.slice(prefix.length, innerRequest.length - suffix.length);
                newRequestStr = item.alias.toString().replace("*", match);
              }

              if (matchRequest && innerRequest !== alias && !innerRequest.startsWith(alias + "/")) {
                /** @type {string} */
                var remainingRequest = innerRequest.slice(item.name.length);
                newRequestStr = alias + remainingRequest;
              }

              if (newRequestStr !== undefined) {
                shouldStop = true;
                /** @type {ResolveRequest} */

                var obj = _objectSpread({}, request, {
                  request: newRequestStr,
                  fullySpecified: false
                });

                return resolver.doResolve(target, obj, "aliased with mapping '" + item.name + "': '" + alias + "' to '" + newRequestStr + "'", resolveContext, function (err, result) {
                  if (err) return callback(err);
                  if (result) return callback(null, result);
                  return callback();
                });
              }

              return callback();
            };
            /**
             * @param {null|Error} [err] error
             * @param {null|ResolveRequest} [result] result
             * @returns {void}
             */


            var stoppingCallback = function stoppingCallback(err, result) {
              if (err) return callback(err);
              if (result) return callback(null, result); // Don't allow other aliasing or raw request

              if (shouldStop) return callback(null, null);
              return callback();
            };

            if (Array.isArray(item.alias)) {
              return forEachBail(item.alias, resolveWithAlias, stoppingCallback);
            } else {
              return resolveWithAlias(item.alias, stoppingCallback);
            }
          }

          return callback();
        }, callback);
      });
    }
  }]);

  return AliasPlugin;
}();