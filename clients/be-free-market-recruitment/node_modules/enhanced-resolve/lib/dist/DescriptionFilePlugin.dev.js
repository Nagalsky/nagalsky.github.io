/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DescriptionFileUtils = require("./DescriptionFileUtils");
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").ResolveRequest} ResolveRequest */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */


module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   * @param {string[]} filenames filenames
   * @param {boolean} pathIsFile pathIsFile
   * @param {string | ResolveStepHook} target target
   */
  function DescriptionFilePlugin(source, filenames, pathIsFile, target) {
    _classCallCheck(this, DescriptionFilePlugin);

    this.source = source;
    this.filenames = filenames;
    this.pathIsFile = pathIsFile;
    this.target = target;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(DescriptionFilePlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("DescriptionFilePlugin", function (request, resolveContext, callback) {
        var path = request.path;
        if (!path) return callback();
        var directory = _this.pathIsFile ? DescriptionFileUtils.cdUp(path) : path;
        if (!directory) return callback();
        DescriptionFileUtils.loadDescriptionFile(resolver, directory, _this.filenames, request.descriptionFilePath ? {
          path: request.descriptionFilePath,
          content: request.descriptionFileData,
          directory:
          /** @type {string} */
          request.descriptionFileRoot
        } : undefined, resolveContext, function (err, result) {
          if (err) return callback(err);

          if (!result) {
            if (resolveContext.log) resolveContext.log("No description file found in ".concat(directory, " or above"));
            return callback();
          }

          var relativePath = "." + path.slice(result.directory.length).replace(/\\/g, "/");
          /** @type {ResolveRequest} */

          var obj = _objectSpread({}, request, {
            descriptionFilePath: result.path,
            descriptionFileData: result.content,
            descriptionFileRoot: result.directory,
            relativePath: relativePath
          });

          resolver.doResolve(target, obj, "using description file: " + result.path + " (relative path: " + relativePath + ")", resolveContext, function (err, result) {
            if (err) return callback(err); // Don't allow other processing

            if (result === undefined) return callback(null, null);
            callback(null, result);
          });
        });
      });
    }
  }]);

  return DescriptionFilePlugin;
}();