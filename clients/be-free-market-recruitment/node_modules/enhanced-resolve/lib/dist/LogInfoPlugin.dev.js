/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   */
  function LogInfoPlugin(source) {
    _classCallCheck(this, LogInfoPlugin);

    this.source = source;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(LogInfoPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var source = this.source;
      resolver.getHook(this.source).tapAsync("LogInfoPlugin", function (request, resolveContext, callback) {
        if (!resolveContext.log) return callback();
        var log = resolveContext.log;
        var prefix = "[" + source + "] ";
        if (request.path) log(prefix + "Resolving in directory: " + request.path);
        if (request.request) log(prefix + "Resolving request: " + request.request);
        if (request.module) log(prefix + "Request is an module request.");
        if (request.directory) log(prefix + "Request is a directory request.");
        if (request.query) log(prefix + "Resolving request query: " + request.query);
        if (request.fragment) log(prefix + "Resolving request fragment: " + request.fragment);
        if (request.descriptionFilePath) log(prefix + "Has description data from " + request.descriptionFilePath);
        if (request.relativePath) log(prefix + "Relative path from description file is: " + request.relativePath);
        callback();
      });
    }
  }]);

  return LogInfoPlugin;
}();