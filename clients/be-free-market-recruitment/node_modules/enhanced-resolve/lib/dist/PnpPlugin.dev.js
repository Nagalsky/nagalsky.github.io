/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author MaÃ«l Nison @arcanis
*/
"use strict";
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */

/** @typedef {import("./Resolver").ResolveRequest} ResolveRequest */

/**
 * @typedef {Object} PnpApiImpl
 * @property {function(string, string, object): string | null} resolveToUnqualified
 */

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   * @param {PnpApiImpl} pnpApi pnpApi
   * @param {string | ResolveStepHook} target target
   * @param {string | ResolveStepHook} alternateTarget alternateTarget
   */
  function PnpPlugin(source, pnpApi, target, alternateTarget) {
    _classCallCheck(this, PnpPlugin);

    this.source = source;
    this.pnpApi = pnpApi;
    this.target = target;
    this.alternateTarget = alternateTarget;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(PnpPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      /** @type {ResolveStepHook} */
      var target = resolver.ensureHook(this.target);
      var alternateTarget = resolver.ensureHook(this.alternateTarget);
      resolver.getHook(this.source).tapAsync("PnpPlugin", function (request, resolveContext, callback) {
        var req = request.request;
        if (!req) return callback(); // The trailing slash indicates to PnP that this value is a folder rather than a file

        var issuer = "".concat(request.path, "/");
        var packageMatch = /^(@[^/]+\/)?[^/]+/.exec(req);
        if (!packageMatch) return callback();
        var packageName = packageMatch[0];
        var innerRequest = ".".concat(req.slice(packageName.length));
        /** @type {string|undefined|null} */

        var resolution;
        /** @type {string|undefined|null} */

        var apiResolution;

        try {
          resolution = _this.pnpApi.resolveToUnqualified(packageName, issuer, {
            considerBuiltins: false
          });

          if (resolution === null) {
            // This is either not a PnP managed issuer or it's a Node builtin
            // Try to continue resolving with our alternatives
            resolver.doResolve(alternateTarget, request, "issuer is not managed by a pnpapi", resolveContext, function (err, result) {
              if (err) return callback(err);
              if (result) return callback(null, result); // Skip alternatives

              return callback(null, null);
            });
            return;
          }

          if (resolveContext.fileDependencies) {
            apiResolution = _this.pnpApi.resolveToUnqualified("pnpapi", issuer, {
              considerBuiltins: false
            });
          }
        } catch (
        /** @type {unknown} */
        error) {
          if (
          /** @type {Error & { code: string }} */
          error.code === "MODULE_NOT_FOUND" &&
          /** @type {Error & { pnpCode: string }} */
          error.pnpCode === "UNDECLARED_DEPENDENCY") {
            // This is not a PnP managed dependency.
            // Try to continue resolving with our alternatives
            if (resolveContext.log) {
              resolveContext.log("request is not managed by the pnpapi");
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator =
                /** @type {Error} */
                error.message.split("\n").filter(Boolean)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var line = _step.value;
                  resolveContext.log("  ".concat(line));
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                    _iterator["return"]();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }

            return callback();
          }

          return callback(
          /** @type {Error} */
          error);
        }

        if (resolution === packageName) return callback();

        if (apiResolution && resolveContext.fileDependencies) {
          resolveContext.fileDependencies.add(apiResolution);
        }
        /** @type {ResolveRequest} */


        var obj = _objectSpread({}, request, {
          path: resolution,
          request: innerRequest,
          ignoreSymlinks: true,
          fullySpecified: request.fullySpecified && innerRequest !== "."
        });

        resolver.doResolve(target, obj, "resolved by pnp to ".concat(resolution), resolveContext, function (err, result) {
          if (err) return callback(err);
          if (result) return callback(null, result); // Skip alternatives

          return callback(null, null);
        });
      });
    }
  }]);

  return PnpPlugin;
}();