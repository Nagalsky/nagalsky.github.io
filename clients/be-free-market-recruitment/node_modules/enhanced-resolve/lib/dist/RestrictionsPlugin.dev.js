/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/
"use strict";
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var slashCode = "/".charCodeAt(0);
var backslashCode = "\\".charCodeAt(0);
/**
 * @param {string} path path
 * @param {string} parent parent path
 * @returns {boolean} true, if path is inside of parent
 */

var isInside = function isInside(path, parent) {
  if (!path.startsWith(parent)) return false;
  if (path.length === parent.length) return true;
  var charCode = path.charCodeAt(parent.length);
  return charCode === slashCode || charCode === backslashCode;
};

module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   * @param {Set<string | RegExp>} restrictions restrictions
   */
  function RestrictionsPlugin(source, restrictions) {
    _classCallCheck(this, RestrictionsPlugin);

    this.source = source;
    this.restrictions = restrictions;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(RestrictionsPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      resolver.getHook(this.source).tapAsync("RestrictionsPlugin", function (request, resolveContext, callback) {
        if (typeof request.path === "string") {
          var path = request.path;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = _this.restrictions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var rule = _step.value;

              if (typeof rule === "string") {
                if (!isInside(path, rule)) {
                  if (resolveContext.log) {
                    resolveContext.log("".concat(path, " is not inside of the restriction ").concat(rule));
                  }

                  return callback(null, null);
                }
              } else if (!rule.test(path)) {
                if (resolveContext.log) {
                  resolveContext.log("".concat(path, " doesn't match the restriction ").concat(rule));
                }

                return callback(null, null);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }

        callback();
      });
    }
  }]);

  return RestrictionsPlugin;
}();