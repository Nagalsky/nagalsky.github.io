/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/
"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DescriptionFileUtils = require("./DescriptionFileUtils");

var forEachBail = require("./forEachBail");

var _require = require("./util/entrypoints"),
    processImportsField = _require.processImportsField;

var _require2 = require("./util/identifier"),
    parseIdentifier = _require2.parseIdentifier;

var _require3 = require("./util/path"),
    invalidSegmentRegEx = _require3.invalidSegmentRegEx,
    deprecatedInvalidSegmentRegEx = _require3.deprecatedInvalidSegmentRegEx;
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").JsonObject} JsonObject */

/** @typedef {import("./Resolver").ResolveRequest} ResolveRequest */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */

/** @typedef {import("./util/entrypoints").FieldProcessor} FieldProcessor */

/** @typedef {import("./util/entrypoints").ImportsField} ImportsField */


var dotCode = ".".charCodeAt(0);

module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   * @param {Set<string>} conditionNames condition names
   * @param {string | string[]} fieldNamePath name path
   * @param {string | ResolveStepHook} targetFile target file
   * @param {string | ResolveStepHook} targetPackage target package
   */
  function ImportsFieldPlugin(source, conditionNames, fieldNamePath, targetFile, targetPackage) {
    _classCallCheck(this, ImportsFieldPlugin);

    this.source = source;
    this.targetFile = targetFile;
    this.targetPackage = targetPackage;
    this.conditionNames = conditionNames;
    this.fieldName = fieldNamePath;
    /** @type {WeakMap<JsonObject, FieldProcessor>} */

    this.fieldProcessorCache = new WeakMap();
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(ImportsFieldPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var targetFile = resolver.ensureHook(this.targetFile);
      var targetPackage = resolver.ensureHook(this.targetPackage);
      resolver.getHook(this.source).tapAsync("ImportsFieldPlugin", function (request, resolveContext, callback) {
        // When there is no description file, abort
        if (!request.descriptionFilePath || request.request === undefined) {
          return callback();
        }

        var remainingRequest = request.request + request.query + request.fragment;
        var importsField =
        /** @type {ImportsField|null|undefined} */
        DescriptionFileUtils.getField(
        /** @type {JsonObject} */
        request.descriptionFileData, _this.fieldName);
        if (!importsField) return callback();

        if (request.directory) {
          return callback(new Error("Resolving to directories is not possible with the imports field (request was ".concat(remainingRequest, "/)")));
        }
        /** @type {string[]} */


        var paths;
        /** @type {string | null} */

        var usedField;

        try {
          // We attach the cache to the description file instead of the importsField value
          // because we use a WeakMap and the importsField could be a string too.
          // Description file is always an object when exports field can be accessed.
          var fieldProcessor = _this.fieldProcessorCache.get(
          /** @type {JsonObject} */
          request.descriptionFileData);

          if (fieldProcessor === undefined) {
            fieldProcessor = processImportsField(importsField);

            _this.fieldProcessorCache.set(
            /** @type {JsonObject} */
            request.descriptionFileData, fieldProcessor);
          }

          var _fieldProcessor = fieldProcessor(remainingRequest, _this.conditionNames);

          var _fieldProcessor2 = _slicedToArray(_fieldProcessor, 2);

          paths = _fieldProcessor2[0];
          usedField = _fieldProcessor2[1];
        } catch (
        /** @type {unknown} */
        err) {
          if (resolveContext.log) {
            resolveContext.log("Imports field in ".concat(request.descriptionFilePath, " can't be processed: ").concat(err));
          }

          return callback(
          /** @type {Error} */
          err);
        }

        if (paths.length === 0) {
          return callback(new Error("Package import ".concat(remainingRequest, " is not imported from package ").concat(request.descriptionFileRoot, " (see imports field in ").concat(request.descriptionFilePath, ")")));
        }

        forEachBail(paths,
        /**
         * @param {string} p path
         * @param {(err?: null|Error, result?: null|ResolveRequest) => void} callback callback
         * @param {number} i index
         * @returns {void}
         */
        function (p, callback, i) {
          var parsedIdentifier = parseIdentifier(p);
          if (!parsedIdentifier) return callback();

          var _parsedIdentifier = _slicedToArray(parsedIdentifier, 3),
              path_ = _parsedIdentifier[0],
              query = _parsedIdentifier[1],
              fragment = _parsedIdentifier[2];

          switch (path_.charCodeAt(0)) {
            // should be relative
            case dotCode:
              {
                if (invalidSegmentRegEx.exec(path_.slice(2)) !== null && deprecatedInvalidSegmentRegEx.test(path_.slice(2)) !== null) {
                  if (paths.length === i) {
                    return callback(new Error("Invalid \"imports\" target \"".concat(p, "\" defined for \"").concat(usedField, "\" in the package config ").concat(request.descriptionFilePath, ", targets must start with \"./\"")));
                  }

                  return callback();
                }
                /** @type {ResolveRequest} */


                var obj = _objectSpread({}, request, {
                  request: undefined,
                  path: resolver.join(
                  /** @type {string} */
                  request.descriptionFileRoot, path_),
                  relativePath: path_,
                  query: query,
                  fragment: fragment
                });

                resolver.doResolve(targetFile, obj, "using imports field: " + p, resolveContext, function (err, result) {
                  if (err) return callback(err); // Don't allow to continue - https://github.com/webpack/enhanced-resolve/issues/400

                  if (result === undefined) return callback(null, null);
                  callback(null, result);
                });
                break;
              }
            // package resolving

            default:
              {
                /** @type {ResolveRequest} */
                var _obj = _objectSpread({}, request, {
                  request: path_,
                  relativePath: path_,
                  fullySpecified: true,
                  query: query,
                  fragment: fragment
                });

                resolver.doResolve(targetPackage, _obj, "using imports field: " + p, resolveContext, function (err, result) {
                  if (err) return callback(err); // Don't allow to continue - https://github.com/webpack/enhanced-resolve/issues/400

                  if (result === undefined) return callback(null, null);
                  callback(null, result);
                });
              }
          }
        },
        /**
         * @param {null|Error} [err] error
         * @param {null|ResolveRequest} [result] result
         * @returns {void}
         */
        function (err, result) {
          return callback(err, result || null);
        });
      });
    }
  }]);

  return ImportsFieldPlugin;
}();