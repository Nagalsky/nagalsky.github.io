/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("./Resolver").FileSystem} FileSystem */

/** @typedef {import("./Resolver").ReaddirStringCallback} ReaddirStringCallback */

/** @typedef {import("./Resolver").StringCallback} StringCallback */

/** @typedef {import("./Resolver").SyncFileSystem} SyncFileSystem */

/**
 * @param {SyncFileSystem} fs file system implementation
 * @constructor
 */

function SyncAsyncFileSystemDecorator(fs) {
  this.fs = fs;
  this.lstat = undefined;
  this.lstatSync = undefined;
  var lstatSync = fs.lstatSync;

  if (lstatSync) {
    this.lstat =
    /** @type {FileSystem["lstat"]} */
    function (arg, options, callback) {
      var result;

      try {
        result =
        /** @type {Function | undefined} */
        callback ? lstatSync.call(fs, arg, options) : lstatSync.call(fs, arg);
      } catch (e) {
        return (callback || options)(
        /** @type {NodeJS.ErrnoException | null} */
        e);
      }

      (callback || options)(null,
      /** @type {any} */
      result);
    };

    this.lstatSync =
    /** @type {SyncFileSystem["lstatSync"]} */
    function (arg, options) {
      return lstatSync.call(fs, arg, options);
    };
  }

  this.stat =
  /** @type {FileSystem["stat"]} */
  function (arg, options, callback) {
    var result;

    try {
      result =
      /** @type {Function | undefined} */
      callback ? fs.statSync(arg, options) : fs.statSync(arg);
    } catch (e) {
      return (callback || options)(
      /** @type {NodeJS.ErrnoException | null} */
      e);
    }

    (callback || options)(null,
    /** @type {any} */
    result);
  };

  this.statSync =
  /** @type {SyncFileSystem["statSync"]} */
  function (arg, options) {
    return fs.statSync(arg, options);
  };

  this.readdir =
  /** @type {FileSystem["readdir"]} */
  function (arg, options, callback) {
    var result;

    try {
      result =
      /** @type {Function | undefined} */
      callback ? fs.readdirSync(arg,
      /** @type {Exclude<Parameters<FileSystem["readdir"]>[1], ReaddirStringCallback>} */
      options) : fs.readdirSync(arg);
    } catch (e) {
      return (callback || options)(
      /** @type {NodeJS.ErrnoException | null} */
      e);
    }

    (callback || options)(null,
    /** @type {any} */
    result);
  };

  this.readdirSync =
  /** @type {SyncFileSystem["readdirSync"]} */
  function (arg, options) {
    return fs.readdirSync(arg,
    /** @type {Parameters<SyncFileSystem["readdirSync"]>[1]} */
    options);
  };

  this.readFile =
  /** @type {FileSystem["readFile"]} */
  function (arg, options, callback) {
    var result;

    try {
      result =
      /** @type {Function | undefined} */
      callback ? fs.readFileSync(arg, options) : fs.readFileSync(arg);
    } catch (e) {
      return (callback || options)(
      /** @type {NodeJS.ErrnoException | null} */
      e);
    }

    (callback || options)(null,
    /** @type {any} */
    result);
  };

  this.readFileSync =
  /** @type {SyncFileSystem["readFileSync"]} */
  function (arg, options) {
    return fs.readFileSync(arg, options);
  };

  this.readlink =
  /** @type {FileSystem["readlink"]} */
  function (arg, options, callback) {
    var result;

    try {
      result =
      /** @type {Function | undefined} */
      callback ? fs.readlinkSync(arg,
      /** @type {Exclude<Parameters<FileSystem["readlink"]>[1], StringCallback>} */
      options) : fs.readlinkSync(arg);
    } catch (e) {
      return (callback || options)(
      /** @type {NodeJS.ErrnoException | null} */
      e);
    }

    (callback || options)(null,
    /** @type {any} */
    result);
  };

  this.readlinkSync =
  /** @type {SyncFileSystem["readlinkSync"]} */
  function (arg, options) {
    return fs.readlinkSync(arg,
    /** @type {Parameters<SyncFileSystem["readlinkSync"]>[1]} */
    options);
  };

  this.readJson = undefined;
  this.readJsonSync = undefined;
  var readJsonSync = fs.readJsonSync;

  if (readJsonSync) {
    this.readJson =
    /** @type {FileSystem["readJson"]} */
    function (arg, callback) {
      var result;

      try {
        result = readJsonSync.call(fs, arg);
      } catch (e) {
        return callback(
        /** @type {NodeJS.ErrnoException | Error | null} */
        e);
      }

      callback(null, result);
    };

    this.readJsonSync =
    /** @type {SyncFileSystem["readJsonSync"]} */
    function (arg) {
      return readJsonSync.call(fs, arg);
    };
  }

  this.realpath = undefined;
  this.realpathSync = undefined;
  var realpathSync = fs.realpathSync;

  if (realpathSync) {
    this.realpath =
    /** @type {FileSystem["realpath"]} */
    function (arg, options, callback) {
      var result;

      try {
        result =
        /** @type {Function | undefined} */
        callback ? realpathSync.call(fs, arg,
        /** @type {Exclude<Parameters<NonNullable<FileSystem["realpath"]>>[1], StringCallback>} */
        options) : realpathSync.call(fs, arg);
      } catch (e) {
        return (callback || options)(
        /** @type {NodeJS.ErrnoException | null} */
        e);
      }

      (callback || options)(null,
      /** @type {any} */
      result);
    };

    this.realpathSync =
    /** @type {SyncFileSystem["realpathSync"]} */
    function (arg, options) {
      return realpathSync.call(fs, arg,
      /** @type {Parameters<NonNullable<SyncFileSystem["realpathSync"]>>[1]} */
      options);
    };
  }
}

module.exports = SyncAsyncFileSystemDecorator;