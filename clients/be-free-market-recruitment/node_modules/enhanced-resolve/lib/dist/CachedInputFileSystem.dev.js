/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var nextTick = require("process").nextTick;
/** @typedef {import("./Resolver").FileSystem} FileSystem */

/** @typedef {import("./Resolver").PathLike} PathLike */

/** @typedef {import("./Resolver").PathOrFileDescriptor} PathOrFileDescriptor */

/** @typedef {import("./Resolver").SyncFileSystem} SyncFileSystem */

/** @typedef {FileSystem & SyncFileSystem} BaseFileSystem */

/**
 * @template T
 * @typedef {import("./Resolver").FileSystemCallback<T>} FileSystemCallback<T>
 */

/**
 * @param {string} path path
 * @returns {string} dirname
 */


var dirname = function dirname(path) {
  var idx = path.length - 1;

  while (idx >= 0) {
    var c = path.charCodeAt(idx); // slash or backslash

    if (c === 47 || c === 92) break;
    idx--;
  }

  if (idx < 0) return "";
  return path.slice(0, idx);
};
/**
 * @template T
 * @param {FileSystemCallback<T>[]} callbacks callbacks
 * @param {Error | null} err error
 * @param {T} result result
 */


var runCallbacks = function runCallbacks(callbacks, err, result) {
  if (callbacks.length === 1) {
    callbacks[0](err, result);
    callbacks.length = 0;
    return;
  }

  var error;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var callback = _step.value;

      try {
        callback(err, result);
      } catch (e) {
        if (!error) error = e;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  callbacks.length = 0;
  if (error) throw error;
};

var OperationMergerBackend =
/*#__PURE__*/
function () {
  /**
   * @param {Function | undefined} provider async method in filesystem
   * @param {Function | undefined} syncProvider sync method in filesystem
   * @param {BaseFileSystem} providerContext call context for the provider methods
   */
  function OperationMergerBackend(provider, syncProvider, providerContext) {
    var _this = this;

    _classCallCheck(this, OperationMergerBackend);

    this._provider = provider;
    this._syncProvider = syncProvider;
    this._providerContext = providerContext;
    this._activeAsyncOperations = new Map();
    this.provide = this._provider ?
    /**
     * @param {PathLike | PathOrFileDescriptor} path path
     * @param {object | FileSystemCallback<any> | undefined} options options
     * @param {FileSystemCallback<any>=} callback callback
     * @returns {any} result
     */
    function (path, options, callback) {
      if (typeof options === "function") {
        callback =
        /** @type {FileSystemCallback<any>} */
        options;
        options = undefined;
      }

      if (typeof path !== "string" && !Buffer.isBuffer(path) && !(path instanceof URL) && typeof path !== "number") {
        /** @type {Function} */
        callback(new TypeError("path must be a string, Buffer, URL or number"));
        return;
      }

      if (options) {
        return (
          /** @type {Function} */
          _this._provider.call(_this._providerContext, path, options, callback)
        );
      }

      var callbacks = _this._activeAsyncOperations.get(path);

      if (callbacks) {
        callbacks.push(callback);
        return;
      }

      _this._activeAsyncOperations.set(path, callbacks = [callback]);
      /** @type {Function} */


      provider(path,
      /**
       * @param {Error} err error
       * @param {any} result result
       */
      function (err, result) {
        _this._activeAsyncOperations["delete"](path);

        runCallbacks(callbacks, err, result);
      });
    } : null;
    this.provideSync = this._syncProvider ?
    /**
     * @param {PathLike | PathOrFileDescriptor} path path
     * @param {object=} options options
     * @returns {any} result
     */
    function (path, options) {
      return (
        /** @type {Function} */
        _this._syncProvider.call(_this._providerContext, path, options)
      );
    } : null;
  }

  _createClass(OperationMergerBackend, [{
    key: "purge",
    value: function purge() {}
  }, {
    key: "purgeParent",
    value: function purgeParent() {}
  }]);

  return OperationMergerBackend;
}();
/*

IDLE:
	insert data: goto SYNC

SYNC:
	before provide: run ticks
	event loop tick: goto ASYNC_ACTIVE

ASYNC:
	timeout: run tick, goto ASYNC_PASSIVE

ASYNC_PASSIVE:
	before provide: run ticks

IDLE --[insert data]--> SYNC --[event loop tick]--> ASYNC_ACTIVE --[interval tick]-> ASYNC_PASSIVE
                                                          ^                             |
                                                          +---------[insert data]-------+
*/


var STORAGE_MODE_IDLE = 0;
var STORAGE_MODE_SYNC = 1;
var STORAGE_MODE_ASYNC = 2;
/**
 * @callback Provide
 * @param {PathLike | PathOrFileDescriptor} path path
 * @param {any} options options
 * @param {FileSystemCallback<any>} callback callback
 * @returns {void}
 */

var CacheBackend =
/*#__PURE__*/
function () {
  /**
   * @param {number} duration max cache duration of items
   * @param {function | undefined} provider async method
   * @param {function | undefined} syncProvider sync method
   * @param {BaseFileSystem} providerContext call context for the provider methods
   */
  function CacheBackend(duration, provider, syncProvider, providerContext) {
    _classCallCheck(this, CacheBackend);

    this._duration = duration;
    this._provider = provider;
    this._syncProvider = syncProvider;
    this._providerContext = providerContext;
    /** @type {Map<string, FileSystemCallback<any>[]>} */

    this._activeAsyncOperations = new Map();
    /** @type {Map<string, { err: Error | null, result?: any, level: Set<string> }>} */

    this._data = new Map();
    /** @type {Set<string>[]} */

    this._levels = [];

    for (var i = 0; i < 10; i++) {
      this._levels.push(new Set());
    }

    for (var _i = 5000; _i < duration; _i += 500) {
      this._levels.push(new Set());
    }

    this._currentLevel = 0;
    this._tickInterval = Math.floor(duration / this._levels.length);
    /** @type {STORAGE_MODE_IDLE | STORAGE_MODE_SYNC | STORAGE_MODE_ASYNC} */

    this._mode = STORAGE_MODE_IDLE;
    /** @type {NodeJS.Timeout | undefined} */

    this._timeout = undefined;
    /** @type {number | undefined} */

    this._nextDecay = undefined; // @ts-ignore

    this.provide = provider ? this.provide.bind(this) : null; // @ts-ignore

    this.provideSync = syncProvider ? this.provideSync.bind(this) : null;
  }
  /**
   * @param {PathLike | PathOrFileDescriptor} path path
   * @param {any} options options
   * @param {FileSystemCallback<any>} callback callback
   * @returns {void}
   */


  _createClass(CacheBackend, [{
    key: "provide",
    value: function provide(path, options, callback) {
      var _this2 = this;

      if (typeof options === "function") {
        callback = options;
        options = undefined;
      }

      if (typeof path !== "string" && !Buffer.isBuffer(path) && !(path instanceof URL) && typeof path !== "number") {
        callback(new TypeError("path must be a string, Buffer, URL or number"));
        return;
      }

      var strPath = typeof path !== "string" ? path.toString() : path;

      if (options) {
        return (
          /** @type {Function} */
          this._provider.call(this._providerContext, path, options, callback)
        );
      } // When in sync mode we can move to async mode


      if (this._mode === STORAGE_MODE_SYNC) {
        this._enterAsyncMode();
      } // Check in cache


      var cacheEntry = this._data.get(strPath);

      if (cacheEntry !== undefined) {
        if (cacheEntry.err) return nextTick(callback, cacheEntry.err);
        return nextTick(callback, null, cacheEntry.result);
      } // Check if there is already the same operation running


      var callbacks = this._activeAsyncOperations.get(strPath);

      if (callbacks !== undefined) {
        callbacks.push(callback);
        return;
      }

      this._activeAsyncOperations.set(strPath, callbacks = [callback]); // Run the operation

      /** @type {Function} */


      this._provider.call(this._providerContext, path,
      /**
       * @param {Error | null} err error
       * @param {any} [result] result
       */
      function (err, result) {
        _this2._activeAsyncOperations["delete"](strPath);

        _this2._storeResult(strPath, err, result); // Enter async mode if not yet done


        _this2._enterAsyncMode();

        runCallbacks(
        /** @type {FileSystemCallback<any>[]} */
        callbacks, err, result);
      });
    }
    /**
     * @param {PathLike | PathOrFileDescriptor} path path
     * @param {any} options options
     * @returns {any} result
     */

  }, {
    key: "provideSync",
    value: function provideSync(path, options) {
      if (typeof path !== "string" && !Buffer.isBuffer(path) && !(path instanceof URL) && typeof path !== "number") {
        throw new TypeError("path must be a string");
      }

      var strPath = typeof path !== "string" ? path.toString() : path;

      if (options) {
        return (
          /** @type {Function} */
          this._syncProvider.call(this._providerContext, path, options)
        );
      } // In sync mode we may have to decay some cache items


      if (this._mode === STORAGE_MODE_SYNC) {
        this._runDecays();
      } // Check in cache


      var cacheEntry = this._data.get(strPath);

      if (cacheEntry !== undefined) {
        if (cacheEntry.err) throw cacheEntry.err;
        return cacheEntry.result;
      } // Get all active async operations
      // This sync operation will also complete them


      var callbacks = this._activeAsyncOperations.get(strPath);

      this._activeAsyncOperations["delete"](strPath); // Run the operation
      // When in idle mode, we will enter sync mode


      var result;

      try {
        result =
        /** @type {Function} */
        this._syncProvider.call(this._providerContext, path);
      } catch (err) {
        this._storeResult(strPath,
        /** @type {Error} */
        err, undefined);

        this._enterSyncModeWhenIdle();

        if (callbacks) {
          runCallbacks(callbacks,
          /** @type {Error} */
          err, undefined);
        }

        throw err;
      }

      this._storeResult(strPath, null, result);

      this._enterSyncModeWhenIdle();

      if (callbacks) {
        runCallbacks(callbacks, null, result);
      }

      return result;
    }
    /**
     * @param {string | Buffer | URL | number | (string | URL | Buffer | number)[] | Set<string | URL | Buffer | number>} [what] what to purge
     */

  }, {
    key: "purge",
    value: function purge(what) {
      if (!what) {
        if (this._mode !== STORAGE_MODE_IDLE) {
          this._data.clear();

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = this._levels[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var level = _step2.value;
              level.clear();
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          this._enterIdleMode();
        }
      } else if (typeof what === "string" || Buffer.isBuffer(what) || what instanceof URL || typeof what === "number") {
        var strWhat = typeof what !== "string" ? what.toString() : what;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this._data[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _step3$value = _slicedToArray(_step3.value, 2),
                key = _step3$value[0],
                data = _step3$value[1];

            if (key.startsWith(strWhat)) {
              this._data["delete"](key);

              data.level["delete"](key);
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        if (this._data.size === 0) {
          this._enterIdleMode();
        }
      } else {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = this._data[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _step4$value = _slicedToArray(_step4.value, 2),
                _key = _step4$value[0],
                _data = _step4$value[1];

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
              for (var _iterator5 = what[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var item = _step5.value;
                var strItem = typeof item !== "string" ? item.toString() : item;

                if (_key.startsWith(strItem)) {
                  this._data["delete"](_key);

                  _data.level["delete"](_key);

                  break;
                }
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                  _iterator5["return"]();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        if (this._data.size === 0) {
          this._enterIdleMode();
        }
      }
    }
    /**
     * @param {string | Buffer | URL | number | (string | URL | Buffer | number)[] | Set<string | URL | Buffer | number>} [what] what to purge
     */

  }, {
    key: "purgeParent",
    value: function purgeParent(what) {
      if (!what) {
        this.purge();
      } else if (typeof what === "string" || Buffer.isBuffer(what) || what instanceof URL || typeof what === "number") {
        var strWhat = typeof what !== "string" ? what.toString() : what;
        this.purge(dirname(strWhat));
      } else {
        var set = new Set();
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = what[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var item = _step6.value;
            var strItem = typeof item !== "string" ? item.toString() : item;
            set.add(dirname(strItem));
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
              _iterator6["return"]();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        this.purge(set);
      }
    }
    /**
     * @param {string} path path
     * @param {Error | null} err error
     * @param {any} result result
     */

  }, {
    key: "_storeResult",
    value: function _storeResult(path, err, result) {
      if (this._data.has(path)) return;
      var level = this._levels[this._currentLevel];

      this._data.set(path, {
        err: err,
        result: result,
        level: level
      });

      level.add(path);
    }
  }, {
    key: "_decayLevel",
    value: function _decayLevel() {
      var nextLevel = (this._currentLevel + 1) % this._levels.length;
      var decay = this._levels[nextLevel];
      this._currentLevel = nextLevel;
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = decay[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var item = _step7.value;

          this._data["delete"](item);
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      decay.clear();

      if (this._data.size === 0) {
        this._enterIdleMode();
      } else {
        /** @type {number} */
        this._nextDecay += this._tickInterval;
      }
    }
  }, {
    key: "_runDecays",
    value: function _runDecays() {
      while (
      /** @type {number} */
      this._nextDecay <= Date.now() && this._mode !== STORAGE_MODE_IDLE) {
        this._decayLevel();
      }
    }
  }, {
    key: "_enterAsyncMode",
    value: function _enterAsyncMode() {
      var _this3 = this;

      var timeout = 0;

      switch (this._mode) {
        case STORAGE_MODE_ASYNC:
          return;

        case STORAGE_MODE_IDLE:
          this._nextDecay = Date.now() + this._tickInterval;
          timeout = this._tickInterval;
          break;

        case STORAGE_MODE_SYNC:
          this._runDecays(); // _runDecays may change the mode


          if (
          /** @type {STORAGE_MODE_IDLE | STORAGE_MODE_SYNC | STORAGE_MODE_ASYNC}*/
          this._mode === STORAGE_MODE_IDLE) return;
          timeout = Math.max(0,
          /** @type {number} */
          this._nextDecay - Date.now());
          break;
      }

      this._mode = STORAGE_MODE_ASYNC;
      var ref = setTimeout(function () {
        _this3._mode = STORAGE_MODE_SYNC;

        _this3._runDecays();
      }, timeout);
      if (ref.unref) ref.unref();
      this._timeout = ref;
    }
  }, {
    key: "_enterSyncModeWhenIdle",
    value: function _enterSyncModeWhenIdle() {
      if (this._mode === STORAGE_MODE_IDLE) {
        this._mode = STORAGE_MODE_SYNC;
        this._nextDecay = Date.now() + this._tickInterval;
      }
    }
  }, {
    key: "_enterIdleMode",
    value: function _enterIdleMode() {
      this._mode = STORAGE_MODE_IDLE;
      this._nextDecay = undefined;
      if (this._timeout) clearTimeout(this._timeout);
    }
  }]);

  return CacheBackend;
}();
/**
 * @template {function} Provider
 * @template {function} AsyncProvider
 * @template FileSystem
 * @param {number} duration duration in ms files are cached
 * @param {Provider | undefined} provider provider
 * @param {AsyncProvider | undefined} syncProvider sync provider
 * @param {BaseFileSystem} providerContext provider context
 * @returns {OperationMergerBackend | CacheBackend} backend
 */


var createBackend = function createBackend(duration, provider, syncProvider, providerContext) {
  if (duration > 0) {
    return new CacheBackend(duration, provider, syncProvider, providerContext);
  }

  return new OperationMergerBackend(provider, syncProvider, providerContext);
};

module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {BaseFileSystem} fileSystem file system
   * @param {number} duration duration in ms files are cached
   */
  function CachedInputFileSystem(fileSystem, duration) {
    var _this4 = this;

    _classCallCheck(this, CachedInputFileSystem);

    this.fileSystem = fileSystem;
    this._lstatBackend = createBackend(duration, this.fileSystem.lstat, this.fileSystem.lstatSync, this.fileSystem);
    var lstat = this._lstatBackend.provide;
    this.lstat =
    /** @type {FileSystem["lstat"]} */
    lstat;
    var lstatSync = this._lstatBackend.provideSync;
    this.lstatSync =
    /** @type {SyncFileSystem["lstatSync"]} */
    lstatSync;
    this._statBackend = createBackend(duration, this.fileSystem.stat, this.fileSystem.statSync, this.fileSystem);
    var stat = this._statBackend.provide;
    this.stat =
    /** @type {FileSystem["stat"]} */
    stat;
    var statSync = this._statBackend.provideSync;
    this.statSync =
    /** @type {SyncFileSystem["statSync"]} */
    statSync;
    this._readdirBackend = createBackend(duration, this.fileSystem.readdir, this.fileSystem.readdirSync, this.fileSystem);
    var readdir = this._readdirBackend.provide;
    this.readdir =
    /** @type {FileSystem["readdir"]} */
    readdir;
    var readdirSync = this._readdirBackend.provideSync;
    this.readdirSync =
    /** @type {SyncFileSystem["readdirSync"]} */
    readdirSync;
    this._readFileBackend = createBackend(duration, this.fileSystem.readFile, this.fileSystem.readFileSync, this.fileSystem);
    var readFile = this._readFileBackend.provide;
    this.readFile =
    /** @type {FileSystem["readFile"]} */
    readFile;
    var readFileSync = this._readFileBackend.provideSync;
    this.readFileSync =
    /** @type {SyncFileSystem["readFileSync"]} */
    readFileSync;
    this._readJsonBackend = createBackend(duration, // prettier-ignore
    this.fileSystem.readJson || this.readFile &&
    /**
     * @param {string} path path
     * @param {FileSystemCallback<any>} callback
     */
    function (path, callback) {
      _this4.readFile(path, function (err, buffer) {
        if (err) return callback(err);
        if (!buffer || buffer.length === 0) return callback(new Error("No file content"));
        var data;

        try {
          data = JSON.parse(buffer.toString("utf-8"));
        } catch (e) {
          return callback(
          /** @type {Error} */
          e);
        }

        callback(null, data);
      });
    }, // prettier-ignore
    this.fileSystem.readJsonSync || this.readFileSync &&
    /**
     * @param {string} path path
     * @returns {any} result
     */
    function (path) {
      var buffer = _this4.readFileSync(path);

      var data = JSON.parse(buffer.toString("utf-8"));
      return data;
    }, this.fileSystem);
    var readJson = this._readJsonBackend.provide;
    this.readJson =
    /** @type {FileSystem["readJson"]} */
    readJson;
    var readJsonSync = this._readJsonBackend.provideSync;
    this.readJsonSync =
    /** @type {SyncFileSystem["readJsonSync"]} */
    readJsonSync;
    this._readlinkBackend = createBackend(duration, this.fileSystem.readlink, this.fileSystem.readlinkSync, this.fileSystem);
    var readlink = this._readlinkBackend.provide;
    this.readlink =
    /** @type {FileSystem["readlink"]} */
    readlink;
    var readlinkSync = this._readlinkBackend.provideSync;
    this.readlinkSync =
    /** @type {SyncFileSystem["readlinkSync"]} */
    readlinkSync;
    this._realpathBackend = createBackend(duration, this.fileSystem.realpath, this.fileSystem.realpathSync, this.fileSystem);
    var realpath = this._realpathBackend.provide;
    this.realpath =
    /** @type {FileSystem["realpath"]} */
    realpath;
    var realpathSync = this._realpathBackend.provideSync;
    this.realpathSync =
    /** @type {SyncFileSystem["realpathSync"]} */
    realpathSync;
  }
  /**
   * @param {string | Buffer | URL | number | (string | URL | Buffer | number)[] | Set<string | URL | Buffer | number>} [what] what to purge
   */


  _createClass(CachedInputFileSystem, [{
    key: "purge",
    value: function purge(what) {
      this._statBackend.purge(what);

      this._lstatBackend.purge(what);

      this._readdirBackend.purgeParent(what);

      this._readFileBackend.purge(what);

      this._readlinkBackend.purge(what);

      this._readJsonBackend.purge(what);

      this._realpathBackend.purge(what);
    }
  }]);

  return CachedInputFileSystem;
}();