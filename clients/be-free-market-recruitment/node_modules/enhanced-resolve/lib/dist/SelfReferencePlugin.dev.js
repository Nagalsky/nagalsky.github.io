/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DescriptionFileUtils = require("./DescriptionFileUtils");
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").JsonObject} JsonObject */

/** @typedef {import("./Resolver").ResolveRequest} ResolveRequest */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */


var slashCode = "/".charCodeAt(0);

module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   * @param {string | string[]} fieldNamePath name path
   * @param {string | ResolveStepHook} target target
   */
  function SelfReferencePlugin(source, fieldNamePath, target) {
    _classCallCheck(this, SelfReferencePlugin);

    this.source = source;
    this.target = target;
    this.fieldName = fieldNamePath;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(SelfReferencePlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("SelfReferencePlugin", function (request, resolveContext, callback) {
        if (!request.descriptionFilePath) return callback();
        var req = request.request;
        if (!req) return callback(); // Feature is only enabled when an exports field is present

        var exportsField = DescriptionFileUtils.getField(
        /** @type {JsonObject} */
        request.descriptionFileData, _this.fieldName);
        if (!exportsField) return callback();
        var name = DescriptionFileUtils.getField(
        /** @type {JsonObject} */
        request.descriptionFileData, "name");
        if (typeof name !== "string") return callback();

        if (req.startsWith(name) && (req.length === name.length || req.charCodeAt(name.length) === slashCode)) {
          var remainingRequest = ".".concat(req.slice(name.length));
          /** @type {ResolveRequest} */

          var obj = _objectSpread({}, request, {
            request: remainingRequest,
            path:
            /** @type {string} */
            request.descriptionFileRoot,
            relativePath: "."
          });

          resolver.doResolve(target, obj, "self reference", resolveContext, callback);
        } else {
          return callback();
        }
      });
    }
  }]);

  return SelfReferencePlugin;
}();