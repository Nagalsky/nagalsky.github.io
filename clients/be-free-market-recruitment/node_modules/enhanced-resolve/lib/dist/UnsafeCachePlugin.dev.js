/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").ResolveRequest} ResolveRequest */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */

/** @typedef {import("./Resolver").ResolveContextYield} ResolveContextYield */

/** @typedef {{[k: string]: ResolveRequest | ResolveRequest[] | undefined}} Cache */

/**
 * @param {string} type type of cache
 * @param {ResolveRequest} request request
 * @param {boolean} withContext cache with context?
 * @returns {string} cache id
 */

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function getCacheId(type, request, withContext) {
  return JSON.stringify({
    type: type,
    context: withContext ? request.context : "",
    path: request.path,
    query: request.query,
    fragment: request.fragment,
    request: request.request
  });
}

module.exports =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source
   * @param {function(ResolveRequest): boolean} filterPredicate filterPredicate
   * @param {Cache} cache cache
   * @param {boolean} withContext withContext
   * @param {string | ResolveStepHook} target target
   */
  function UnsafeCachePlugin(source, filterPredicate, cache, withContext, target) {
    _classCallCheck(this, UnsafeCachePlugin);

    this.source = source;
    this.filterPredicate = filterPredicate;
    this.withContext = withContext;
    this.cache = cache;
    this.target = target;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(UnsafeCachePlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("UnsafeCachePlugin", function (request, resolveContext, callback) {
        if (!_this.filterPredicate(request)) return callback();
        var isYield = typeof resolveContext["yield"] === "function";
        var cacheId = getCacheId(isYield ? "yield" : "default", request, _this.withContext);
        var cacheEntry = _this.cache[cacheId];

        if (cacheEntry) {
          if (isYield) {
            var _yield_ =
            /** @type {Function} */
            resolveContext["yield"];

            if (Array.isArray(cacheEntry)) {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = cacheEntry[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var result = _step.value;

                  _yield_(result);
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                    _iterator["return"]();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            } else {
              _yield_(cacheEntry);
            }

            return callback(null, null);
          }

          return callback(null,
          /** @type {ResolveRequest} */
          cacheEntry);
        }
        /** @type {ResolveContextYield|undefined} */


        var yieldFn;
        /** @type {ResolveContextYield|undefined} */

        var yield_;
        /** @type {ResolveRequest[]} */

        var yieldResult = [];

        if (isYield) {
          yieldFn = resolveContext["yield"];

          yield_ = function yield_(result) {
            yieldResult.push(result);
          };
        }

        resolver.doResolve(target, request, null, yield_ ? _objectSpread({}, resolveContext, {
          "yield": yield_
        }) : resolveContext, function (err, result) {
          if (err) return callback(err);

          if (isYield) {
            if (result) yieldResult.push(result);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = yieldResult[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _result = _step2.value;

                /** @type {ResolveContextYield} */
                yieldFn(_result);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            _this.cache[cacheId] = yieldResult;
            return callback(null, null);
          }

          if (result) return callback(null, _this.cache[cacheId] = result);
          callback();
        });
      });
    }
  }]);

  return UnsafeCachePlugin;
}();