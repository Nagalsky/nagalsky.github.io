/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Hook = require("./Hook");

var HookCodeFactory = require("./HookCodeFactory");

var SyncLoopHookCodeFactory =
/*#__PURE__*/
function (_HookCodeFactory) {
  _inherits(SyncLoopHookCodeFactory, _HookCodeFactory);

  function SyncLoopHookCodeFactory() {
    _classCallCheck(this, SyncLoopHookCodeFactory);

    return _possibleConstructorReturn(this, _getPrototypeOf(SyncLoopHookCodeFactory).apply(this, arguments));
  }

  _createClass(SyncLoopHookCodeFactory, [{
    key: "content",
    value: function content(_ref) {
      var _onError = _ref.onError,
          onDone = _ref.onDone,
          rethrowIfPossible = _ref.rethrowIfPossible;
      return this.callTapsLooping({
        onError: function onError(i, err) {
          return _onError(err);
        },
        onDone: onDone,
        rethrowIfPossible: rethrowIfPossible
      });
    }
  }]);

  return SyncLoopHookCodeFactory;
}(HookCodeFactory);

var factory = new SyncLoopHookCodeFactory();

var TAP_ASYNC = function TAP_ASYNC() {
  throw new Error("tapAsync is not supported on a SyncLoopHook");
};

var TAP_PROMISE = function TAP_PROMISE() {
  throw new Error("tapPromise is not supported on a SyncLoopHook");
};

var COMPILE = function COMPILE(options) {
  factory.setup(this, options);
  return factory.create(options);
};

function SyncLoopHook() {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var hook = new Hook(args, name);
  hook.constructor = SyncLoopHook;
  hook.tapAsync = TAP_ASYNC;
  hook.tapPromise = TAP_PROMISE;
  hook.compile = COMPILE;
  return hook;
}

SyncLoopHook.prototype = null;
module.exports = SyncLoopHook;