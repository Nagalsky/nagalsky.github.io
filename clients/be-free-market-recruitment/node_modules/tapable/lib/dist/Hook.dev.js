/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var util = require("util");

var deprecateContext = util.deprecate(function () {}, "Hook.context is deprecated and will be removed");

var CALL_DELEGATE = function CALL_DELEGATE() {
  this.call = this._createCall("sync");
  return this.call.apply(this, arguments);
};

var CALL_ASYNC_DELEGATE = function CALL_ASYNC_DELEGATE() {
  this.callAsync = this._createCall("async");
  return this.callAsync.apply(this, arguments);
};

var PROMISE_DELEGATE = function PROMISE_DELEGATE() {
  this.promise = this._createCall("promise");
  return this.promise.apply(this, arguments);
};

var Hook =
/*#__PURE__*/
function () {
  function Hook() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    _classCallCheck(this, Hook);

    this._args = args;
    this.name = name;
    this.taps = [];
    this.interceptors = [];
    this._call = CALL_DELEGATE;
    this.call = CALL_DELEGATE;
    this._callAsync = CALL_ASYNC_DELEGATE;
    this.callAsync = CALL_ASYNC_DELEGATE;
    this._promise = PROMISE_DELEGATE;
    this.promise = PROMISE_DELEGATE;
    this._x = undefined;
    this.compile = this.compile;
    this.tap = this.tap;
    this.tapAsync = this.tapAsync;
    this.tapPromise = this.tapPromise;
  }

  _createClass(Hook, [{
    key: "compile",
    value: function compile(options) {
      throw new Error("Abstract: should be overridden");
    }
  }, {
    key: "_createCall",
    value: function _createCall(type) {
      return this.compile({
        taps: this.taps,
        interceptors: this.interceptors,
        args: this._args,
        type: type
      });
    }
  }, {
    key: "_tap",
    value: function _tap(type, options, fn) {
      if (typeof options === "string") {
        options = {
          name: options.trim()
        };
      } else if (_typeof(options) !== "object" || options === null) {
        throw new Error("Invalid tap options");
      }

      if (typeof options.name !== "string" || options.name === "") {
        throw new Error("Missing name for tap");
      }

      if (typeof options.context !== "undefined") {
        deprecateContext();
      }

      options = Object.assign({
        type: type,
        fn: fn
      }, options);
      options = this._runRegisterInterceptors(options);

      this._insert(options);
    }
  }, {
    key: "tap",
    value: function tap(options, fn) {
      this._tap("sync", options, fn);
    }
  }, {
    key: "tapAsync",
    value: function tapAsync(options, fn) {
      this._tap("async", options, fn);
    }
  }, {
    key: "tapPromise",
    value: function tapPromise(options, fn) {
      this._tap("promise", options, fn);
    }
  }, {
    key: "_runRegisterInterceptors",
    value: function _runRegisterInterceptors(options) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.interceptors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var interceptor = _step.value;

          if (interceptor.register) {
            var newOptions = interceptor.register(options);

            if (newOptions !== undefined) {
              options = newOptions;
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return options;
    }
  }, {
    key: "withOptions",
    value: function withOptions(options) {
      var _this = this;

      var mergeOptions = function mergeOptions(opt) {
        return Object.assign({}, options, typeof opt === "string" ? {
          name: opt
        } : opt);
      };

      return {
        name: this.name,
        tap: function tap(opt, fn) {
          return _this.tap(mergeOptions(opt), fn);
        },
        tapAsync: function tapAsync(opt, fn) {
          return _this.tapAsync(mergeOptions(opt), fn);
        },
        tapPromise: function tapPromise(opt, fn) {
          return _this.tapPromise(mergeOptions(opt), fn);
        },
        intercept: function intercept(interceptor) {
          return _this.intercept(interceptor);
        },
        isUsed: function isUsed() {
          return _this.isUsed();
        },
        withOptions: function withOptions(opt) {
          return _this.withOptions(mergeOptions(opt));
        }
      };
    }
  }, {
    key: "isUsed",
    value: function isUsed() {
      return this.taps.length > 0 || this.interceptors.length > 0;
    }
  }, {
    key: "intercept",
    value: function intercept(interceptor) {
      this._resetCompilation();

      this.interceptors.push(Object.assign({}, interceptor));

      if (interceptor.register) {
        for (var i = 0; i < this.taps.length; i++) {
          this.taps[i] = interceptor.register(this.taps[i]);
        }
      }
    }
  }, {
    key: "_resetCompilation",
    value: function _resetCompilation() {
      this.call = this._call;
      this.callAsync = this._callAsync;
      this.promise = this._promise;
    }
  }, {
    key: "_insert",
    value: function _insert(item) {
      this._resetCompilation();

      var before;

      if (typeof item.before === "string") {
        before = new Set([item.before]);
      } else if (Array.isArray(item.before)) {
        before = new Set(item.before);
      }

      var stage = 0;

      if (typeof item.stage === "number") {
        stage = item.stage;
      }

      var i = this.taps.length;

      while (i > 0) {
        i--;
        var x = this.taps[i];
        this.taps[i + 1] = x;
        var xStage = x.stage || 0;

        if (before) {
          if (before.has(x.name)) {
            before["delete"](x.name);
            continue;
          }

          if (before.size > 0) {
            continue;
          }
        }

        if (xStage > stage) {
          continue;
        }

        i++;
        break;
      }

      this.taps[i] = item;
    }
  }]);

  return Hook;
}();

Object.setPrototypeOf(Hook.prototype, null);
module.exports = Hook;