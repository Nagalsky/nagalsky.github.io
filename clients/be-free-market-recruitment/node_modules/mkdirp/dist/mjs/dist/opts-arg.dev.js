"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optsArg = void 0;

var _fs = require("fs");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var optsArg = function optsArg(opts) {
  if (!opts) {
    opts = {
      mode: 511
    };
  } else if (_typeof(opts) === 'object') {
    opts = _objectSpread({
      mode: 511
    }, opts);
  } else if (typeof opts === 'number') {
    opts = {
      mode: opts
    };
  } else if (typeof opts === 'string') {
    opts = {
      mode: parseInt(opts, 8)
    };
  } else {
    throw new TypeError('invalid options argument');
  }

  var resolved = opts;
  var optsFs = opts.fs || {};
  opts.mkdir = opts.mkdir || optsFs.mkdir || _fs.mkdir;
  opts.mkdirAsync = opts.mkdirAsync ? opts.mkdirAsync : function _callee(path, options) {
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (res, rej) {
              return resolved.mkdir(path, options, function (er, made) {
                return er ? rej(er) : res(made);
              });
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    });
  };
  opts.stat = opts.stat || optsFs.stat || _fs.stat;
  opts.statAsync = opts.statAsync ? opts.statAsync : function _callee2(path) {
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", new Promise(function (res, rej) {
              return resolved.stat(path, function (err, stats) {
                return err ? rej(err) : res(stats);
              });
            }));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    });
  };
  opts.statSync = opts.statSync || optsFs.statSync || _fs.statSync;
  opts.mkdirSync = opts.mkdirSync || optsFs.mkdirSync || _fs.mkdirSync;
  return resolved;
};

exports.optsArg = optsArg;