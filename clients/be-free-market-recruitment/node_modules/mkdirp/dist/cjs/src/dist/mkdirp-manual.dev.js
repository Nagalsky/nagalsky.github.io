"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mkdirpManual = exports.mkdirpManualSync = void 0;

var path_1 = require("path");

var opts_arg_js_1 = require("./opts-arg.js");

var mkdirpManualSync = function mkdirpManualSync(path, options, made) {
  var parent = (0, path_1.dirname)(path);

  var opts = _objectSpread({}, (0, opts_arg_js_1.optsArg)(options), {
    recursive: false
  });

  if (parent === path) {
    try {
      return opts.mkdirSync(path, opts);
    } catch (er) {
      // swallowed by recursive implementation on posix systems
      // any other error is a failure
      var fer = er;

      if (fer && fer.code !== 'EISDIR') {
        throw er;
      }

      return;
    }
  }

  try {
    opts.mkdirSync(path, opts);
    return made || path;
  } catch (er) {
    var _fer = er;

    if (_fer && _fer.code === 'ENOENT') {
      return (0, exports.mkdirpManualSync)(path, opts, (0, exports.mkdirpManualSync)(parent, opts, made));
    }

    if (_fer && _fer.code !== 'EEXIST' && _fer && _fer.code !== 'EROFS') {
      throw er;
    }

    try {
      if (!opts.statSync(path).isDirectory()) throw er;
    } catch (_) {
      throw er;
    }
  }
};

exports.mkdirpManualSync = mkdirpManualSync;
exports.mkdirpManual = Object.assign(function _callee2(path, options, made) {
  var opts, parent;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          opts = (0, opts_arg_js_1.optsArg)(options);
          opts.recursive = false;
          parent = (0, path_1.dirname)(path);

          if (!(parent === path)) {
            _context2.next = 5;
            break;
          }

          return _context2.abrupt("return", opts.mkdirAsync(path, opts)["catch"](function (er) {
            // swallowed by recursive implementation on posix systems
            // any other error is a failure
            var fer = er;

            if (fer && fer.code !== 'EISDIR') {
              throw er;
            }
          }));

        case 5:
          return _context2.abrupt("return", opts.mkdirAsync(path, opts).then(function () {
            return made || path;
          }, function _callee(er) {
            var fer;
            return regeneratorRuntime.async(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    fer = er;

                    if (!(fer && fer.code === 'ENOENT')) {
                      _context.next = 3;
                      break;
                    }

                    return _context.abrupt("return", (0, exports.mkdirpManual)(parent, opts).then(function (made) {
                      return (0, exports.mkdirpManual)(path, opts, made);
                    }));

                  case 3:
                    if (!(fer && fer.code !== 'EEXIST' && fer.code !== 'EROFS')) {
                      _context.next = 5;
                      break;
                    }

                    throw er;

                  case 5:
                    return _context.abrupt("return", opts.statAsync(path).then(function (st) {
                      if (st.isDirectory()) {
                        return made;
                      } else {
                        throw er;
                      }
                    }, function () {
                      throw er;
                    }));

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            });
          }));

        case 6:
        case "end":
          return _context2.stop();
      }
    }
  });
}, {
  sync: exports.mkdirpManualSync
});