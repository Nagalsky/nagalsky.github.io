"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mkdirpNative = exports.mkdirpNativeSync = void 0;

var path_1 = require("path");

var find_made_js_1 = require("./find-made.js");

var mkdirp_manual_js_1 = require("./mkdirp-manual.js");

var opts_arg_js_1 = require("./opts-arg.js");

var mkdirpNativeSync = function mkdirpNativeSync(path, options) {
  var opts = (0, opts_arg_js_1.optsArg)(options);
  opts.recursive = true;
  var parent = (0, path_1.dirname)(path);

  if (parent === path) {
    return opts.mkdirSync(path, opts);
  }

  var made = (0, find_made_js_1.findMadeSync)(opts, path);

  try {
    opts.mkdirSync(path, opts);
    return made;
  } catch (er) {
    var fer = er;

    if (fer && fer.code === 'ENOENT') {
      return (0, mkdirp_manual_js_1.mkdirpManualSync)(path, opts);
    } else {
      throw er;
    }
  }
};

exports.mkdirpNativeSync = mkdirpNativeSync;
exports.mkdirpNative = Object.assign(function _callee(path, options) {
  var opts, parent;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          opts = _objectSpread({}, (0, opts_arg_js_1.optsArg)(options), {
            recursive: true
          });
          parent = (0, path_1.dirname)(path);

          if (!(parent === path)) {
            _context.next = 6;
            break;
          }

          _context.next = 5;
          return regeneratorRuntime.awrap(opts.mkdirAsync(path, opts));

        case 5:
          return _context.abrupt("return", _context.sent);

        case 6:
          return _context.abrupt("return", (0, find_made_js_1.findMade)(opts, path).then(function (made) {
            return opts.mkdirAsync(path, opts).then(function (m) {
              return made || m;
            })["catch"](function (er) {
              var fer = er;

              if (fer && fer.code === 'ENOENT') {
                return (0, mkdirp_manual_js_1.mkdirpManual)(path, opts);
              } else {
                throw er;
              }
            });
          }));

        case 7:
        case "end":
          return _context.stop();
      }
    }
  });
}, {
  sync: exports.mkdirpNativeSync
});