#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var package_json_1 = require("../package.json");

var usage = function usage() {
  return "\nusage: mkdirp [DIR1,DIR2..] {OPTIONS}\n\n  Create each supplied directory including any necessary parent directories\n  that don't yet exist.\n\n  If the directory already exists, do nothing.\n\nOPTIONS are:\n\n  -m<mode>       If a directory needs to be created, set the mode as an octal\n  --mode=<mode>  permission string.\n\n  -v --version   Print the mkdirp version number\n\n  -h --help      Print this helpful banner\n\n  -p --print     Print the first directories created for each path provided\n\n  --manual       Use manual implementation, even if native is available\n";
};

var dirs = [];
var opts = {};
var doPrint = false;
var dashdash = false;
var manual = false;
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = process.argv.slice(2)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var arg = _step.value;
    if (dashdash) dirs.push(arg);else if (arg === '--') dashdash = true;else if (arg === '--manual') manual = true;else if (/^-h/.test(arg) || /^--help/.test(arg)) {
      console.log(usage());
      process.exit(0);
    } else if (arg === '-v' || arg === '--version') {
      console.log(package_json_1.version);
      process.exit(0);
    } else if (arg === '-p' || arg === '--print') {
      doPrint = true;
    } else if (/^-m/.test(arg) || /^--mode=/.test(arg)) {
      // these don't get covered in CI, but work locally
      // weird because the tests below show as passing in the output.

      /* c8 ignore start */
      var mode = parseInt(arg.replace(/^(-m|--mode=)/, ''), 8);

      if (isNaN(mode)) {
        console.error("invalid mode argument: ".concat(arg, "\nMust be an octal number."));
        process.exit(1);
      }
      /* c8 ignore stop */


      opts.mode = mode;
    } else dirs.push(arg);
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
      _iterator["return"]();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var index_js_1 = require("./index.js");

var impl = manual ? index_js_1.mkdirp.manual : index_js_1.mkdirp;

if (dirs.length === 0) {
  console.error(usage());
} // these don't get covered in CI, but work locally

/* c8 ignore start */


Promise.all(dirs.map(function (dir) {
  return impl(dir, opts);
})).then(function (made) {
  return doPrint ? made.forEach(function (m) {
    return m && console.log(m);
  }) : null;
})["catch"](function (er) {
  console.error(er.message);
  if (er.code) console.error('  code: ' + er.code);
  process.exit(1);
});
/* c8 ignore stop */