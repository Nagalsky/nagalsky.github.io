"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var BROWSER_MAPPING = {
  and_chr: 'chrome',
  and_ff: 'firefox',
  ie_mob: 'ie',
  op_mob: 'opera',
  and_qq: null,
  and_uc: null,
  baidu: null,
  bb: null,
  kaios: null,
  op_mini: null
};

function browserslistToTargets(browserslist) {
  var targets = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = browserslist[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var browser = _step.value;

      var _browser$split = browser.split(' '),
          _browser$split2 = _slicedToArray(_browser$split, 2),
          name = _browser$split2[0],
          v = _browser$split2[1];

      if (BROWSER_MAPPING[name] === null) {
        continue;
      }

      var version = parseVersion(v);

      if (version == null) {
        continue;
      }

      if (targets[name] == null || version < targets[name]) {
        targets[name] = version;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return targets;
}

function parseVersion(version) {
  var _version$split$0$spli = version.split('-')[0].split('.').map(function (v) {
    return parseInt(v, 10);
  }),
      _version$split$0$spli2 = _slicedToArray(_version$split$0$spli, 3),
      major = _version$split$0$spli2[0],
      _version$split$0$spli3 = _version$split$0$spli2[1],
      minor = _version$split$0$spli3 === void 0 ? 0 : _version$split$0$spli3,
      _version$split$0$spli4 = _version$split$0$spli2[2],
      patch = _version$split$0$spli4 === void 0 ? 0 : _version$split$0$spli4;

  if (isNaN(major) || isNaN(minor) || isNaN(patch)) {
    return null;
  }

  return major << 16 | minor << 8 | patch;
}

module.exports = browserslistToTargets;